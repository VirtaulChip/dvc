##############################################################################
# DVC COMMAND USAGE
##############################################################################
dvc_init_server:
	Usage: $prog [svn|file|start|stop]
	Description:
	  svn   -  start with svn server mode 
	  file  -  start with file access mode

	  start -  start server using SVN_MODE mode
	  stop  -  stop svn server

	  job   -  show current server job with ps command
	  pid   -  return current server pid

 
#
# Environment Variable Access
#
dvc_set_server:   
	Usage: $prog <var> <value>
	Description:
	  set the SVN data root and the svn server mode
	store the value in ~/.dop/server/,
	available server variable:
	  SVN_ROOT - server data root
	  SVN_MODE - "file", "svn"
	  SVN_HOST - svn server hostname
	  SVN_PORT - svn server port

dvc_get_server:
	Usage: $prog
	Description:
	  fetch the SVN server setting from $SVN_ROOT/.dop/env/


dvc_set_env:   
	Usage: $prog [--server|--local] [--reset] <env_name> <value>
	Description:
	  set variable value and store it in .dop/env  $env(env_name)
	if <env_name> is not specified, list all existing variables

dvc_get_env:
	Usage: $prog [--server] [--all] <env_name>
	Description:
	  get the value of env_name from .dop/env/
	--local (default)
		search the env_name in $(PWD)/.dop/env
	--server
		search the env_name in $(SVN_ROOT)/.dop/env
	--script
		print the value in shell script format
	--tcl
		print the value in tcl script format
	--csv
		print the value in csv format
	--all
		list all varaibles value 


dvc_set_dqi:
	Usage: $prog [--root <dqi_root>] [--reset] <dqi_name> [<dqi_value>]
	Description:
	  store the dqi_value into file $dqi_root/.dqi/$dqi_name
	if <dqi_name> is not specified, list all existing dqi name

	--root $dqi_root : dqi variable are stored in $dqi_root/.dqi
		    default dqi root is stored in env(DQI_ROOT) 


dvc_get_dqi:
	Usage: $prog [-roor <dqi_root>] [--all] <dqi_name>
	Description:
	  return the value of dqi variable
	--all
		list all varaibles value 


#
# Design Variable Access
#

dvc_set_project:   
	Usage: $prog <project>
	Description:
	  Set the default project name and store the value to .dop/env/

dvc_set_design:   
	Usage: $prog /<phase>/<block>/<stage>/<version> 
	Description:
	  Assign default version path and store the value to .dop/env/

dvc_set_container:   
	Usage: $prog <container>
	Description:
	  Assign default working container, 
	  set the value of DESIGN_CONTR, CONTAINER_DIR and DVC_PATH

dvc_get_project:   
	Usage: $prog
	Description:
	  fetch the DESIGN_PROJT value from .dop/env/

dvc_get_design:   
	Usage: $prog 
	Description:
	  fetch working design folder name from .dop/env/
	DESIGN_PHASE, DESIGN_BLOCK, DESIGN_STAGE, DESIGN_VERSN
	CURR_PHASE, CURR_BLOCK, CURR_STAGE, CURR_VERSN

dvc_get_container:   
	Usage: $prog 
	Description:
	  fectch working container name from .dop/env/
	DESIGN_CONTR, CURR_CONTR

#
# Handle Design Project
#
dvc_create_project:   
	Usage: $prog <DESIGN_PROJT>
	Description:
	  create project repository in SVN data folder($SVN_ROOT)
	copy the default config files (dvc/etc/conf/*) to conf/ folder

dvc_checkout_project:   
	Usage: $prog [--depth <files|infinity>] <DESIGN_PROJT> [<PROJT_ROOT>]
	Description:
	  create a .project folder in current directory
	checkout project folder to $PROJT_ROOT/
	--depth infinity
		checkout all data and subfolder under version folder 

#
# Create Design Version Folder at Server side
#
dvc_create_design:
	Usage: $prog <phase>/<block>/<stage>/<version>
	Description:
	  create_design will call the following commans sequentially.

dvc_create_phase:   
	Usage: $prog <DESIGN_PHASE>
dvc_create_block:   
	Usage: $prog <DESIGN_BLOCK>
dvc_create_stage:   
	Usage: $prog <DESIGN_STAGE>
dvc_create_version:   
	Usage: $prog <DESIGN_VERSN> 

#
# Checkout Design Version Folder to Working Directory
#
dvc_checkout_design:
	Usage: $prog <phase>/<block>/<stage>/<version>
	Description:
	  checkout_design will call the following commans sequentially.

dvc_checkout_phase:   
	Usage: $prog [--depth <mode>] <DESIGN_PHASE>
	Description:
	  checkout phase folder to .project/
	dy default, only .dvc/ is checkout
	--depth infinity
		checkout all data and subfolder under version folder 

dvc_checkout_block:   
	Usage: $prog [--depth <mode>] <DESIGN_BLOCK>
	Description:
	  checkout block folder to .project/
	dy default, only .dvc/ is checkout
	--depth infinity
		checkout all data and subfolder under version folder 

dvc_checkout_stage:   
	Usage: $prog [--depth <mode>] <DESIGN_STAGE>
	Description:
	  checkout stage folder to .project/
	dy default, only .dvc/ is checkout
	--depth infinity
		checkout all data and subfolder under version folder 

dvc_checkout_version:   
	Usage: $prog [--depth <mode>] <DESIGN_VERSN>
	Description:
	  This command will call dvc_set_version first and then
	checkout version folder to local working directory .project/
	dy default, only .dvc/ is checkout
	create the following link
		:phase -> _/phase
		:block -> _/phase/chip
		:stage -> _/phase/chip/stage
		:version -> _/phase/chip/stage/version
	create "_:" link in all four levels, pointing it to current version
	--depth infinity
		checkout all data and subfolder under version folder 

#
# Checkin Design Working Directory to SVN Respository
#
dvc_checkin_design:
	Usage: $prog <phase>/<block>/<stage>/<version>
	Description:
	  checkin_design commt all files under version/container

#
# Container
#
dvc_create_container:   
	Usage: $prog <DESIGN_CONTR>
	Description:
	  create a container folder under version directory in SVN server

dvc_checkout_container:   
	Usage: $prog <DESIGN_CONTR>
	Description:
	  1) checkout container folder to local working directory
	     _/<phase>/<block>/<stage>/<version>/$container
	  2) create a :container link to :version/$container
	:container ->	:version/$container

dvc_checkin_container:   
	Usage: $prog <CONTAINER>
	Description:
	  add all objects in container folder and then commit to SVN server

dvc_empty_container:   
	Usage: $prog [<CONTAINER>]
	Description:
	  clean up design object in container (on server side)



#
# Handle Design Objects Individually and Commit the change
#
dvc_copy_object:   
	Usage: $prog <SRC_FILE> <DESIGN_OBJECT>
	Description:
	  copy the <SRC_FILE> to container, change name to <DESIGN_OBJECT>
	checkin the file into local repository

dvc_link_object:   
	Usage: $prog <SRC_FILE> <OBJECT_LINK>
	Description:
	  create a link to the source file <SRC_FILE>
	checkin the link into local repository

dvc_rename_object:   
	Usage: $prog <DESIGN_OBJECT> <NEW_NAME>
	Description:
	  rename the design object to new name

dvc_delete_object:   
	Usage: $prog <DESIGN_OBJECT>
	Description:
	  delete the design object from local repository

dvc_update_container:   
	Usage: $prog <CONTAINER>
	Description:
	  update change of design objects from SVN server,
	merge the change with local modification.

dvc_commit_container:   
	Usage: $prog <CONTAINER>
	Description:
	  commit the design object change to SVN server
	change by add, copy, link, rename, delete will only affect the
	local respository, it will only be push to server when you commit
	it.


#
# List content under design folder
#
dvc_list_project:
	Usage: $prog <DESIGN_PROJT>
	Description:
	  list all phases under project directory

dvc_list_phase:   
	Usage: $prog <DESIGN_PHASE>
	Description:
	  list all blocks under phase directory

dvc_list_block:   
	Usage: $prog <DESIGN_BLOCK>
	Description:
	  list all stages under block directory

dvc_list_stage:   
	Usage: $prog <DESIGN_STAGE>
	Description:
	  list all versions under stage directory

dvc_list_version:   
	Usage: $prog <DESIGN_VERSN>
	Description:
	  list all containers under version directory

dvc_list_container:   
	Usage: $prog <DESIGN_CONTR>
	Description:
	  list all objects under container directory

dvc_tree_design:   
	Usage: $prog <dir>
	Description:
	  call unix tree command to print out tree structure

dvc_list_dvc_path:   
	Usage: $prog <phase/block/stage/version/container>
	Description:
	  list all sub-folders under design path directory
	default is to list objects in current container

#
# Remove design folder
#
dvc_remove_project:   
	Usage: $prog <DESIGN_PROJT>
dvc_remove_phase:   
	Usage: $prog <DESIGN_PHASE>
dvc_remove_block:   
	Usage: $prog <DESIGN_BLOCK>
dvc_remove_stage:   
	Usage: $prog <DESIGN_STAGE>
dvc_remove_version:   
	Usage: $prog <DESIGN_VERSN>
dvc_remove_container:   
	Usage: $prog <DESIGN_CONTR>

